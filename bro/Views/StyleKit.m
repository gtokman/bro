//
//  StyleKit.m
//  yo
//
//  Created by Gary Tokman on 4/20/17.
//  Copyright Â© 2017 Gary Tokman. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "StyleKit.h"



@implementation StyleKit


#pragma mark - Canvas Drawings

//! Page 1

+ (void)drawAddButton {
  [StyleKit draw_120IPhoneWithFrame:CGRectMake(0, 0, 95, 95) resizing:StyleKitResizingBehaviorAspectFit];
}
+ (void)draw_120IPhoneWithFrame:(CGRect)targetFrame resizing:(StyleKitResizingBehavior)resizing {
  //! General Declarations
  CGContextRef context = UIGraphicsGetCurrentContext();
  CGAffineTransform baseTransform = CGAffineTransformInvert(CGContextGetUserSpaceToDeviceSpaceTransform(context));
  
  //! Resize to Target Frame
  CGContextSaveGState(context);
  CGRect resizedFrame = StyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 95, 95), targetFrame);
  CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
  CGContextScaleCTM(context, resizedFrame.size.width / 95, resizedFrame.size.height / 95);
  
  //! addButton
  {
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 4, 4);
    
    //! Path 2
    UIBezierPath *path2 = [UIBezierPath bezierPath];
    [path2 moveToPoint:CGPointMake(91, 0)];
    [path2 addLineToPoint:CGPointMake(91, 91)];
    [path2 addLineToPoint:CGPointMake(0, 91)];
    [path2 addCurveToPoint:CGPointMake(25.78, 27.61) controlPoint1:CGPointMake(0, 91) controlPoint2:CGPointMake(0, 56.24)];
    [path2 addCurveToPoint:CGPointMake(91, 0) controlPoint1:CGPointMake(51.57, -1.02) controlPoint2:CGPointMake(91, 0)];
    [path2 closePath];
    [path2 moveToPoint:CGPointMake(91, 0)];
    CGContextSaveGState(context);
    path2.usesEvenOddFillRule = YES;
    CGContextSaveGState(context);
    CGContextBeginPath(context);
    CGContextAddPath(context, path2.CGPath);
    CGContextAddRect(context, CGRectInset(path2.bounds, -6, -6));
    CGContextEOClip(context);
    CGContextTranslateCTM(context, -98, 0);
    {
      CGPoint baseZero = CGPointApplyAffineTransform(CGContextConvertPointToDeviceSpace(context, CGPointZero), baseTransform);
      CGPoint baseOne = CGPointApplyAffineTransform(CGContextConvertPointToDeviceSpace(context, CGPointMake(1, 1)), baseTransform);
      CGPoint baseOffset = CGPointApplyAffineTransform(CGContextConvertPointToDeviceSpace(context, CGPointMake(97, -1)), baseTransform);
      CGSize shadowOffset = CGSizeMake(baseOffset.x - baseZero.x, baseOffset.y - baseZero.y);
      CGFloat shadowBlur = 5 * MIN(baseOne.x - baseZero.x, baseOne.y - baseZero.y);
      CGContextSetShadowWithColor(context, shadowOffset, shadowBlur, [UIColor colorWithWhite:0 alpha:0.5].CGColor);
    }
    [UIColor.blackColor setFill];
    [path2 fill];
    CGContextRestoreGState(context);
    path2.usesEvenOddFillRule = YES;
    [[UIColor colorWithWhite:0.847 alpha:0.5] setFill];
    [path2 fill];
    CGContextRestoreGState(context);
    
    //! Combined Shape
    UIBezierPath *combinedShape = [UIBezierPath bezierPath];
    [combinedShape moveToPoint:CGPointMake(17.69, 12.64)];
    [combinedShape addLineToPoint:CGPointMake(17.69, 2.53)];
    [combinedShape addCurveToPoint:CGPointMake(15.17, 0) controlPoint1:CGPointMake(17.69, 1.13) controlPoint2:CGPointMake(16.56, 0)];
    [combinedShape addCurveToPoint:CGPointMake(12.64, 2.53) controlPoint1:CGPointMake(13.76, 0) controlPoint2:CGPointMake(12.64, 1.13)];
    [combinedShape addLineToPoint:CGPointMake(12.64, 12.64)];
    [combinedShape addLineToPoint:CGPointMake(2.53, 12.64)];
    [combinedShape addCurveToPoint:CGPointMake(0, 15.17) controlPoint1:CGPointMake(1.13, 12.64) controlPoint2:CGPointMake(0, 13.77)];
    [combinedShape addCurveToPoint:CGPointMake(2.53, 17.69) controlPoint1:CGPointMake(0, 16.57) controlPoint2:CGPointMake(1.13, 17.69)];
    [combinedShape addLineToPoint:CGPointMake(12.64, 17.69)];
    [combinedShape addLineToPoint:CGPointMake(12.64, 27.8)];
    [combinedShape addCurveToPoint:CGPointMake(15.17, 30.33) controlPoint1:CGPointMake(12.64, 29.2) controlPoint2:CGPointMake(13.77, 30.33)];
    [combinedShape addCurveToPoint:CGPointMake(17.69, 27.8) controlPoint1:CGPointMake(16.57, 30.33) controlPoint2:CGPointMake(17.69, 29.2)];
    [combinedShape addLineToPoint:CGPointMake(17.69, 17.69)];
    [combinedShape addLineToPoint:CGPointMake(27.8, 17.69)];
    [combinedShape addCurveToPoint:CGPointMake(30.33, 15.17) controlPoint1:CGPointMake(29.2, 17.69) controlPoint2:CGPointMake(30.33, 16.56)];
    [combinedShape addCurveToPoint:CGPointMake(27.8, 12.64) controlPoint1:CGPointMake(30.33, 13.76) controlPoint2:CGPointMake(29.2, 12.64)];
    [combinedShape addLineToPoint:CGPointMake(17.69, 12.64)];
    [combinedShape closePath];
    [combinedShape moveToPoint:CGPointMake(17.69, 12.64)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 40.44, 40.44);
    combinedShape.usesEvenOddFillRule = YES;
    [UIColor.whiteColor setFill];
    [combinedShape fill];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
  }
  
  CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+ (UIImage *)imageOf_120IPhone {
  static UIImage * image = nil;
  if (image != nil)
    return image;
  
  UIGraphicsBeginImageContextWithOptions(CGSizeMake(95, 95), NO, 0);
  [StyleKit drawAddButton];
  image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  
  return image;
}


#pragma mark - Resizing Behavior

CGRect StyleKitResizingBehaviorApply(StyleKitResizingBehavior behavior, CGRect rect, CGRect target) {
  if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero)) {
    return rect;
  }
  
  CGSize scales = CGSizeZero;
  scales.width = ABS(target.size.width / rect.size.width);
  scales.height = ABS(target.size.height / rect.size.height);
  
  switch (behavior) {
    case StyleKitResizingBehaviorAspectFit: {
      scales.width = MIN(scales.width, scales.height);
      scales.height = scales.width;
      break;
    }
    case StyleKitResizingBehaviorAspectFill: {
      scales.width = MAX(scales.width, scales.height);
      scales.height = scales.width;
      break;
    }
    case StyleKitResizingBehaviorStretch:
      break;
    
    case StyleKitResizingBehaviorCenter: {
      scales.width = 1;
      scales.height = 1;
      break;
    }
  }
  
  CGRect result = CGRectStandardize(rect);
  result.size.width *= scales.width;
  result.size.height *= scales.height;
  result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
  result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
  return result;
}


@end
